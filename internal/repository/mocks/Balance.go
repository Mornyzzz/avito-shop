// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Balance is an autogenerated mock type for the Balance type
type Balance struct {
	mock.Mock
}

// DecreaseBalance provides a mock function with given fields: ctx, username, amount
func (_m *Balance) DecreaseBalance(ctx context.Context, username string, amount int) error {
	ret := _m.Called(ctx, username, amount)

	if len(ret) == 0 {
		panic("no return value specified for DecreaseBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, username, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserBalance provides a mock function with given fields: ctx, username
func (_m *Balance) GetUserBalance(ctx context.Context, username string) (int, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBalance")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseBalance provides a mock function with given fields: ctx, username, amount
func (_m *Balance) IncreaseBalance(ctx context.Context, username string, amount int) error {
	ret := _m.Called(ctx, username, amount)

	if len(ret) == 0 {
		panic("no return value specified for IncreaseBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, username, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitBalance provides a mock function with given fields: ctx, username, amount
func (_m *Balance) InitBalance(ctx context.Context, username string, amount int) error {
	ret := _m.Called(ctx, username, amount)

	if len(ret) == 0 {
		panic("no return value specified for InitBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, username, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBalance creates a new instance of Balance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBalance(t interface {
	mock.TestingT
	Cleanup(func())
}) *Balance {
	mock := &Balance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
