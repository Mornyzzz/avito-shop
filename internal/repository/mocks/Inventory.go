// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	entity "avito-shop/internal/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Inventory is an autogenerated mock type for the Inventory type
type Inventory struct {
	mock.Mock
}

// AddInventory provides a mock function with given fields: ctx, inventory
func (_m *Inventory) AddInventory(ctx context.Context, inventory entity.Inventory) error {
	ret := _m.Called(ctx, inventory)

	if len(ret) == 0 {
		panic("no return value specified for AddInventory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Inventory) error); ok {
		r0 = rf(ctx, inventory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsInventoryItem provides a mock function with given fields: ctx, username, item
func (_m *Inventory) ExistsInventoryItem(ctx context.Context, username string, item string) (bool, error) {
	ret := _m.Called(ctx, username, item)

	if len(ret) == 0 {
		panic("no return value specified for ExistsInventoryItem")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, username, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, username, item)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInventory provides a mock function with given fields: ctx, username
func (_m *Inventory) GetInventory(ctx context.Context, username string) ([]entity.InventoryItem, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetInventory")
	}

	var r0 []entity.InventoryItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.InventoryItem, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.InventoryItem); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InventoryItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemPrice provides a mock function with given fields: ctx, name
func (_m *Inventory) GetItemPrice(ctx context.Context, name string) (int, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetItemPrice")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementInventoryItemQuantity provides a mock function with given fields: ctx, username, item
func (_m *Inventory) IncrementInventoryItemQuantity(ctx context.Context, username string, item string) error {
	ret := _m.Called(ctx, username, item)

	if len(ret) == 0 {
		panic("no return value specified for IncrementInventoryItemQuantity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, username, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewInventory creates a new instance of Inventory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInventory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Inventory {
	mock := &Inventory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
