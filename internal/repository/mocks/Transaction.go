// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	entity "avito-shop/internal/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Transaction is an autogenerated mock type for the Transaction type
type Transaction struct {
	mock.Mock
}

// AddTransaction provides a mock function with given fields: ctx, txn
func (_m *Transaction) AddTransaction(ctx context.Context, txn entity.CoinTransaction) error {
	ret := _m.Called(ctx, txn)

	if len(ret) == 0 {
		panic("no return value specified for AddTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.CoinTransaction) error); ok {
		r0 = rf(ctx, txn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetReceivedTransactions provides a mock function with given fields: ctx, username
func (_m *Transaction) GetReceivedTransactions(ctx context.Context, username string) ([]entity.ReceivedTransaction, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetReceivedTransactions")
	}

	var r0 []entity.ReceivedTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.ReceivedTransaction, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.ReceivedTransaction); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ReceivedTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSentTransactions provides a mock function with given fields: ctx, username
func (_m *Transaction) GetSentTransactions(ctx context.Context, username string) ([]entity.SentTransaction, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetSentTransactions")
	}

	var r0 []entity.SentTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.SentTransaction, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.SentTransaction); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.SentTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransaction creates a new instance of Transaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transaction {
	mock := &Transaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
